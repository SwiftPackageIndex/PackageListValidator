#if !canImport(ObjectiveC)
  import XCTest

  extension GitHubDefaultBranchQueryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GitHubDefaultBranchQueryTests = [
      ("testDefault", testDefault),
      ("testDefaultBranchName", testDefaultBranchName),
      ("testEmpty", testEmpty),
      ("testNoToken", testNoToken),
      ("testPassedError", testPassedError)
    ]
  }

  extension GitHubRawUrlBuilderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GitHubRawUrlBuilderTests = [
      ("test", test)
    ]
  }

  extension GitHubResolverTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GitHubResolverTests = [
      ("testPackageURL", testPackageURL)
    ]
  }

  extension GitUrlListValidatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GitUrlListValidatorTests = [
      ("testInvalidUrls", testInvalidUrls)
    ]
  }

  extension JustBranchQueryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__JustBranchQueryTests = [
      ("testBranch", testBranch)
    ]
  }

  extension ListFetcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ListFetcherTests = [
      ("testListWithSession", testListWithSession)
    ]
  }

  extension ListValidationChildErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ListValidationChildErrorTests = [
      ("testEmpty", testEmpty)
    ]
  }

  extension ListValidationErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ListValidationErrorTests = [
      ("testEmpty", testEmpty),
      ("testInit", testInit)
    ]
  }

  extension ListValidatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ListValidatorTests = [
      ("testValidateUrls", testValidateUrls)
    ]
  }

  extension PackageDumpProcessFactoryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PackageDumpProcessFactoryTests = [
      ("testDumpPackageProcessAt", testDumpPackageProcessAt)
    ]
  }

  extension PackageFilterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PackageFilterTests = [
      ("testFilter", testFilter)
    ]
  }

  extension PackageListJsonURLParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PackageListJsonURLParserTests = [
      ("testUrl", testUrl),
      ("testUrlPath", testUrlPath)
    ]
  }

  extension PackageListValidatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PackageListValidatorTests = [
      ("testExample", testExample)
    ]
  }

  extension PackageUrlFetcherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PackageUrlFetcherTests = [
      ("testGetPackageInvalidHost", testGetPackageInvalidHost),
      ("testGetPackageNoHost", testGetPackageNoHost)
    ]
  }

  extension ReportErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReportErrorTests = [
      ("testInit", testInit)
    ]
  }

  extension SortedListValidatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SortedListValidatorTests = [
      ("testSort", testSort)
    ]
  }

  extension SwiftPackageDetailsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftPackageDetailsTests = [
      ("testError", testError),
      ("testInit", testInit)
    ]
  }

  extension TemporaryDirDataStorageTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TemporaryDirDataStorageTests = [
      ("testDirectoryUrl", testDirectoryUrl)
    ]
  }

  extension TemporaryPackageDownloaderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TemporaryPackageDownloaderTests = [
      ("testDownload", testDownload)
    ]
  }

  extension UniqueListValidatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UniqueListValidatorTests = [
      ("testinvalidUrls", testinvalidUrls)
    ]
  }

  public func __allTests() -> [XCTestCaseEntry] {
    [
      testCase(GitHubDefaultBranchQueryTests.__allTests__GitHubDefaultBranchQueryTests),
      testCase(GitHubRawUrlBuilderTests.__allTests__GitHubRawUrlBuilderTests),
      testCase(GitHubResolverTests.__allTests__GitHubResolverTests),
      testCase(GitUrlListValidatorTests.__allTests__GitUrlListValidatorTests),
      testCase(JustBranchQueryTests.__allTests__JustBranchQueryTests),
      testCase(ListFetcherTests.__allTests__ListFetcherTests),
      testCase(ListValidationChildErrorTests.__allTests__ListValidationChildErrorTests),
      testCase(ListValidationErrorTests.__allTests__ListValidationErrorTests),
      testCase(ListValidatorTests.__allTests__ListValidatorTests),
      testCase(PackageDumpProcessFactoryTests.__allTests__PackageDumpProcessFactoryTests),
      testCase(PackageFilterTests.__allTests__PackageFilterTests),
      testCase(PackageListJsonURLParserTests.__allTests__PackageListJsonURLParserTests),
      testCase(PackageListValidatorTests.__allTests__PackageListValidatorTests),
      testCase(PackageUrlFetcherTests.__allTests__PackageUrlFetcherTests),
      testCase(ReportErrorTests.__allTests__ReportErrorTests),
      testCase(SortedListValidatorTests.__allTests__SortedListValidatorTests),
      testCase(SwiftPackageDetailsTests.__allTests__SwiftPackageDetailsTests),
      testCase(TemporaryDirDataStorageTests.__allTests__TemporaryDirDataStorageTests),
      testCase(TemporaryPackageDownloaderTests.__allTests__TemporaryPackageDownloaderTests),
      testCase(UniqueListValidatorTests.__allTests__UniqueListValidatorTests)
    ]
  }
#endif
